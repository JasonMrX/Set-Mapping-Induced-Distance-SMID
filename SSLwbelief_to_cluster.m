function SSLwbelief_to_cluster(SimScoreFilename_in, ClusterFilename_out)
% SimScoreRoughPositive.dat file for input,   ClusterFile_out as output

% SimScoreRoughPositive.dat can be generated by the cluster.exe (with #GeneratePairSimilarityDecision set to 1)

%clusterFile is to be examined by DisplayFilesInClustersWithIDs.m

% input 'test_SimScoreRoughPositive.dat' as SimScoreFilename 

  SSL = ReadSimScoreListWithBeliefs(SimScoreFilename_in) ;

  
  [FileNameList  newSSL] = AssignIDsToNames(SSL);

  
  NumFiles = length( FileNameList );
  
  ScoreMatrix = GenerateScoreMatrix( newSSL, NumFiles);
  
  LinkMatrix = ScoreMatrix>=0.7 ;
  
  SimSets = FromMatrixToSets( LinkMatrix ) ;
  
  writeClusterFile( SimSets, FileNameList, ClusterFilename_out)  ;
  
  
  
  
  
function writeClusterFile( SimSets, FileNameList, ClusterFilename)  
  % output SimSets to file
  fout = fopen(ClusterFilename, 'w');
  
  NumSets = length(SimSets);
  
  for n= 1:NumSets
      thisset = SimSets(n).set ;
      SetSize = length( thisset ) ;
      
      if SetSize>1
          fprintf( fout, '%d  \n', SetSize);

          for s=1:SetSize
             fprintf(fout,'%s \n', FileNameList( thisset(s) ).name);
          end
          fprintf(fout,'\n');
      end
      
  end
  fclose(fout);
  
function SimSets = FromMatrixToSets( LinkMatrix )
  [N, N] = size(LinkMatrix);
  
  %Idx = 1:N ;
      
  %Processed(1:N) = 0;
  
  NumSet = 1 ;
  ComSet = GetSubSetForOneRow( 1, LinkMatrix, N )  ;
  SimSets(1).set = ComSet ;
  %Processed(1) = 1 ;
  
  
  for n=2:N
      
      thisset = GetSubSetForOneRow( n, LinkMatrix, N )  ;
          
      
      
      BeNewSet = 1 ;
      for ns=1:NumSet
         if length( intersect( thisset,  SimSets(ns).set  )) >0
                 SimSets(ns).set = union( SimSets(ns).set, thisset ) ;   
                 BeNewSet = 0 ;
                 break ;
         end   
      end
      
      if BeNewSet==1
          SimSets(NumSet+1).set = thisset ;
          NumSet = NumSet + 1 ;
      end
  end
      
function ComSet = GetSubSetForOneRow( i, LinkMatrix, N )  
% Get the common set linked to the i-th row
% LinkMatrix has dimension N

  Idx = 1:N ;
  thisset = Idx( LinkMatrix(i, :)==1) ;
  ComSet = thisset ;
      for k=1: length(thisset)
              oneset = Idx( LinkMatrix( thisset(k) , :)==1) ;
              ComSet = union(ComSet, oneset);            
      end
      
  
function ScoreMatrix = GenerateScoreMatrix( newSSL, NumFiles)
    ScoreMatrix = zeros(NumFiles, NumFiles);
    
    NumPair = length(newSSL);
    
    for m=1:NumPair
        ScoreMatrix( newSSL(m).ID1, newSSL(m).ID2 )  = newSSL(m).simscore ;
        ScoreMatrix( newSSL(m).ID2, newSSL(m).ID1 )  = newSSL(m).simscore ;
    end
  
function [FileNameList  newSSL] = AssignIDsToNames(SSL)
% Assign IDs to names for SSL.  newSSL  has a struct  {.name1, .name2, .ID1, .ID2, .simscore}
% Also return a name list with IDs  , struct{.name, .ID}
  % Assign IDs to names
  if strcmp( SSL(1).name1, SSL(1).name2)  
      FileNameList(1).name = SSL(1).name1 ;
      FileNameList(1).ID = 1 ;
      SSL(1).ID1 = 1 ;
      SSL(1).ID2 = 1 ;
  else    
      FileNameList(1).name = SSL(1).name1 ;
      FileNameList(1).ID = 1 ;

      FileNameList(2).name = SSL(1).name2 ;
      FileNameList(2).ID = 2 ;  

      SSL(1).ID1 = 1 ;
      SSL(1).ID2 = 2 ;
  end
  
  NumPairs = length( SSL );
  
  for m = 2:NumPairs
      
      name1 = SSL(m).name1 ;
      name2 = SSL(m).name2 ;
      
      if strcmp(name1, name2)
          FoundName1ID = -1 ;

          NumNames = length(FileNameList);
          for n=1:NumNames
              if strcmp( name1, FileNameList(n).name )
                  FoundName1ID = FileNameList(n).ID ;
                  break;
              end
          end

          if FoundName1ID >0
              SSL(m).ID1 = FoundName1ID ;
          else
              NumNames = length(FileNameList);
              FileNameList(NumNames+1).name = name1 ;
              FileNameList(NumNames+1).ID = NumNames +1 ;

              SSL(m).ID1 = NumNames+1;
          end          
          SSL(m).ID2 = SSL(m).ID1 ;
      else % two names are different
          FoundName1ID = -1 ;
          FoundName2ID = -1;
          NumNames = length(FileNameList);

          for n=1:NumNames
              if strcmp( name1, FileNameList(n).name )
                  FoundName1ID = FileNameList(n).ID ;
                  break;
              end
          end
          for n=1:NumNames
              if strcmp( name2, FileNameList(n).name )
                  FoundName2ID = FileNameList(n).ID ;
                  break;
              end
          end

          if FoundName1ID >0
              SSL(m).ID1 = FoundName1ID ;
          else
              NumNames = length(FileNameList);
              FileNameList(NumNames+1).name = name1 ;
              FileNameList(NumNames+1).ID = NumNames +1 ;

              SSL(m).ID1 = NumNames+1;
          end

          if FoundName2ID >0
              SSL(m).ID2 = FoundName2ID ;
          else
              NumNames = length(FileNameList);
              FileNameList(NumNames+1).name = name2 ;
              FileNameList(NumNames+1).ID = NumNames +1 ;

              SSL(m).ID2 = NumNames+1;
          end 
      end
  end
  newSSL = SSL ;
  
  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
function SSL = ReadSimScoreList(filename)
   fin = fopen(filename, 'r');

   if fin==-1
       fprintf('Open sim score list file error\n');
       SSL(1).name1 = 'XXXXX';
       SSL(1).name2 = 'XXXX' ;
       SSL(1).simscore = 0 ; % dummy codes
       return ;
   end
   
    N = 0 ;
    len = 1;
    while len>0
      [name len] = fscanf(fin, '%s ', 1) ;
      
      if len>0
          
        N = N + 1;
        SSL(N).name1 = name ;
        
        [name len] = fscanf(fin, '%s ', 1) ;
        SSL(N).name2 = name ;
        
        SSL(N).simscore = fscanf(fin, '%f', 1);
      end
    end
   
   fclose(fin);
   
   
function SSL = ReadSimScoreListWithBeliefs(filename)
   fin = fopen(filename, 'r');

   if fin==-1
       fprintf('Open sim score list file error\n');
       SSL(1).name1 = 'XXXXX';
       SSL(1).name2 = 'XXXX' ;
       SSL(1).simscore = 0;
       SSL(1).SimBelief = 0 ; % dummy codes
       SSL(1).NosimBelief = 0 ; % dummy codes
       SSL(1).NullBelief = 0 ; % dummy codes  
       %fclose(fin);
       return ;
   end
   
    N = 0 ;
    len = 1;
    while len>0
      [name len] = fscanf(fin, '%s ', 1) ;
      
      if len>0
          
        N = N + 1;
        SSL(N).name1 = name ;
        
        [name len] = fscanf(fin, '%s ', 1) ;
        SSL(N).name2 = name ;
        
        SSL(N).simscore = fscanf(fin, '%f', 1);
        SSL(N).SimBelief = fscanf(fin, '%f', 1);
        SSL(N).NosimBelief = fscanf(fin, '%f', 1);
        SSL(N).NullBelief  = fscanf(fin, '%f', 1);
      end
    end
   
   fclose(fin);
  
